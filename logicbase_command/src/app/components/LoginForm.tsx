'use client'
import { useState } from 'react'
import { Button as MUIButton, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Snackbar, Alert } from '@mui/material';
import { Button, Form, Input, Layout, Card, Checkbox, Divider, Typography, Flex } from 'antd'
import { QrcodeOutlined } from '@ant-design/icons'
import CameraCapture from './CameraCapture';
import { useRouter } from "next/navigation";
import { useUserStore } from "@/stores/userStore";
const { Content } = Layout;
const { Text } = Typography;

interface LoginFormValues {
  email?: string,
  password?: string,
  remember?: string,
};
const tailLayout = {
    wrapperCol: { offset: 8, span: 16 },
};
export default function LoginForm(){
    const setUser = useUserStore((state) => state.setUser);
      const [ loading, setLoading ] = useState<boolean>(false);
      const [form] = Form.useForm();
      const [open, setOpen] = useState<boolean>(false);
      const [snackbarOpen, setSnackbarOpen] = useState(false);
      const [snackbarMessage, setSnackbarMessage] = useState('');
      const [snackbarSeverity, setSnackbarSeverity] = useState<'success' | 'error'>('success');
      const router = useRouter();
      const handleClickOpen = () => {
        setOpen(true);
      };
    
      const handleClose = () => {
        setOpen(false);
      };
      const handleQRCapture = (data: string) => {
        if(data.startsWith('https://logicbase-command.vercel.app/register?token=')||data.startsWith('http://localhost:3000/register?token=')){
          router.push(data);
        }
      }
      const handleLogin = async(values: LoginFormValues) => {
        try{
          setLoading(true);
          const response = await fetch('/api/login', {
              method: 'POST',
              body: JSON.stringify({ ...values })
          })
          const data = await response.json();
          
          if(!response.ok){
              setSnackbarMessage(data.error);
              throw new Error("Failed to login user");
          }
          setSnackbarMessage(data.message);
          setUser({
            user_id:data.user_id,
            first_name:data.first_name,
            last_name: data.last_name,
            birthdate: data.birthdate, 
            email:data.email, 
            // role:data.role,
            company_name: data.company_name,
            designation: data.designation,
            profile_image: data.profile_image,
            contact_number:data.contact_number
          })
          setSnackbarSeverity('success')
          router.push("/dashboard");
        } catch (error) {
          console.error(error);
          setSnackbarSeverity('error')
        } finally {
          setLoading(false);
          setSnackbarOpen(true);
        }
      };
    
    return (
        <>
        <Dialog
              open={open}
              onClose={handleClose} 
            >
              <DialogTitle>Scan QR</DialogTitle>
              <DialogContent>
                <DialogContentText>
                  Scan QR Code generated by the Logicbase Command app to register.
                </DialogContentText>
                <CameraCapture onFrameCapture={handleQRCapture}/>
              </DialogContent>
              <DialogActions>
                <MUIButton onClick={handleClose}>Cancel</MUIButton>
              </DialogActions>
            </Dialog>
            <Content className="p-4" style={{flex:1, gap: '1rem', display: 'flex', flexDirection: 'column'}}>
              <Card style={{width: '100%', maxWidth: '700px', margin: 'auto', padding: '1rem'}}>
                <Form onFinish={handleLogin}
                  form={form}
                  labelCol={{ span: 8 }}
                  wrapperCol={{ span: 16 }}
                  style={{ maxWidth: 600 }}
                  initialValues={{ remember: true }}
                >
                  <Form.Item name="email" label='Email' rules={[{ required: true }]}>
                    <Input placeholder="Company email"/>
                  </Form.Item>
                  <Form.Item
                    name="password"
                    label="Password"
                    rules={[{required: true, message: 'Please input your password!',},
                    {min: 6, message: 'Password is at least 6 characters long!'}]}
                    hasFeedback
                  >
                    <Input.Password />
                  </Form.Item>
                  <Form.Item {...tailLayout} name="remember" valuePropName="checked" label={null}>
                    <Checkbox>Remember me</Checkbox>
                  </Form.Item>
                  <Form.Item {...tailLayout} label={null}>
                    <Button type="primary" htmlType="submit" loading={loading}>Login</Button>
                  </Form.Item>
                </Form>
                <Divider></Divider>
                <Flex justify="center" align="center" gap={'12px'} wrap='wrap'>
                  <Text italic>{"Don't have an account?"}</Text><Button onClick={handleClickOpen} icon={<QrcodeOutlined />}>Register via QR Code</Button>
                </Flex>
              </Card>
            </Content>
            <Snackbar anchorOrigin={{ vertical: 'top', horizontal:'center' }} open={snackbarOpen} autoHideDuration={6000} onClose={() => setSnackbarOpen(false)}>
                <Alert onClose={() => setSnackbarOpen(false)} severity={snackbarSeverity} sx={{ width: '100%' }}>
                    {snackbarMessage}
                </Alert>
            </Snackbar>
        </>
            
    )
}